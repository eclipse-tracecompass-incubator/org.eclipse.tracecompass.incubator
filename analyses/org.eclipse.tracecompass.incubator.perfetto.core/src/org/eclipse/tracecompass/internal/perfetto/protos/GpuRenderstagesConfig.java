// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: protos/perfetto/config/gpu/gpu_renderstages_config.proto
// Protobuf Java Version: 4.29.3

package org.eclipse.tracecompass.incubator.internal.perfetto.protos;

public final class GpuRenderstagesConfig {
  private GpuRenderstagesConfig() {}
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 29,
      /* patch= */ 3,
      /* suffix= */ "",
      GpuRenderstagesConfig.class.getName());
  }
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface GpuRenderStagesConfigOrBuilder extends
      // @@protoc_insertion_point(interface_extends:perfetto.protos.GpuRenderStagesConfig)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Enable to separate the color and depth/stencil load and store stages
     * into a separate stages. If disabled, the depth/stencil load and store
     * stages will be combined.  Disabled by default. This option has no effect if
     * Low Overhead mode is enabled.
     * </pre>
     *
     * <code>optional bool full_loadstore = 1;</code>
     * @return Whether the fullLoadstore field is set.
     */
    boolean hasFullLoadstore();
    /**
     * <pre>
     * Enable to separate the color and depth/stencil load and store stages
     * into a separate stages. If disabled, the depth/stencil load and store
     * stages will be combined.  Disabled by default. This option has no effect if
     * Low Overhead mode is enabled.
     * </pre>
     *
     * <code>optional bool full_loadstore = 1;</code>
     * @return The fullLoadstore.
     */
    boolean getFullLoadstore();

    /**
     * <pre>
     * Use the low overhead mode for traces. In this mode render stages are
     * combined into a single workload stage. This provides less granular data but
     * induces minimal GPU overhead. Disabled by default.
     * </pre>
     *
     * <code>optional bool low_overhead = 2;</code>
     * @return Whether the lowOverhead field is set.
     */
    boolean hasLowOverhead();
    /**
     * <pre>
     * Use the low overhead mode for traces. In this mode render stages are
     * combined into a single workload stage. This provides less granular data but
     * induces minimal GPU overhead. Disabled by default.
     * </pre>
     *
     * <code>optional bool low_overhead = 2;</code>
     * @return The lowOverhead.
     */
    boolean getLowOverhead();

    /**
     * <pre>
     * Trace metrics to capture for each render stage
     * </pre>
     *
     * <code>repeated string trace_metrics = 3;</code>
     * @return A list containing the traceMetrics.
     */
    java.util.List<java.lang.String>
        getTraceMetricsList();
    /**
     * <pre>
     * Trace metrics to capture for each render stage
     * </pre>
     *
     * <code>repeated string trace_metrics = 3;</code>
     * @return The count of traceMetrics.
     */
    int getTraceMetricsCount();
    /**
     * <pre>
     * Trace metrics to capture for each render stage
     * </pre>
     *
     * <code>repeated string trace_metrics = 3;</code>
     * @param index The index of the element to return.
     * @return The traceMetrics at the given index.
     */
    java.lang.String getTraceMetrics(int index);
    /**
     * <pre>
     * Trace metrics to capture for each render stage
     * </pre>
     *
     * <code>repeated string trace_metrics = 3;</code>
     * @param index The index of the value to return.
     * @return The bytes of the traceMetrics at the given index.
     */
    com.google.protobuf.ByteString
        getTraceMetricsBytes(int index);
  }
  /**
   * Protobuf type {@code perfetto.protos.GpuRenderStagesConfig}
   */
  public static final class GpuRenderStagesConfig extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:perfetto.protos.GpuRenderStagesConfig)
      GpuRenderStagesConfigOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 29,
        /* patch= */ 3,
        /* suffix= */ "",
        GpuRenderStagesConfig.class.getName());
    }
    // Use GpuRenderStagesConfig.newBuilder() to construct.
    private GpuRenderStagesConfig(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private GpuRenderStagesConfig() {
      traceMetrics_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.eclipse.tracecompass.incubator.internal.perfetto.protos.GpuRenderstagesConfig.internal_static_perfetto_protos_GpuRenderStagesConfig_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.eclipse.tracecompass.incubator.internal.perfetto.protos.GpuRenderstagesConfig.internal_static_perfetto_protos_GpuRenderStagesConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.eclipse.tracecompass.incubator.internal.perfetto.protos.GpuRenderstagesConfig.GpuRenderStagesConfig.class, org.eclipse.tracecompass.incubator.internal.perfetto.protos.GpuRenderstagesConfig.GpuRenderStagesConfig.Builder.class);
    }

    private int bitField0_;
    public static final int FULL_LOADSTORE_FIELD_NUMBER = 1;
    private boolean fullLoadstore_ = false;
    /**
     * <pre>
     * Enable to separate the color and depth/stencil load and store stages
     * into a separate stages. If disabled, the depth/stencil load and store
     * stages will be combined.  Disabled by default. This option has no effect if
     * Low Overhead mode is enabled.
     * </pre>
     *
     * <code>optional bool full_loadstore = 1;</code>
     * @return Whether the fullLoadstore field is set.
     */
    @java.lang.Override
    public boolean hasFullLoadstore() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Enable to separate the color and depth/stencil load and store stages
     * into a separate stages. If disabled, the depth/stencil load and store
     * stages will be combined.  Disabled by default. This option has no effect if
     * Low Overhead mode is enabled.
     * </pre>
     *
     * <code>optional bool full_loadstore = 1;</code>
     * @return The fullLoadstore.
     */
    @java.lang.Override
    public boolean getFullLoadstore() {
      return fullLoadstore_;
    }

    public static final int LOW_OVERHEAD_FIELD_NUMBER = 2;
    private boolean lowOverhead_ = false;
    /**
     * <pre>
     * Use the low overhead mode for traces. In this mode render stages are
     * combined into a single workload stage. This provides less granular data but
     * induces minimal GPU overhead. Disabled by default.
     * </pre>
     *
     * <code>optional bool low_overhead = 2;</code>
     * @return Whether the lowOverhead field is set.
     */
    @java.lang.Override
    public boolean hasLowOverhead() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Use the low overhead mode for traces. In this mode render stages are
     * combined into a single workload stage. This provides less granular data but
     * induces minimal GPU overhead. Disabled by default.
     * </pre>
     *
     * <code>optional bool low_overhead = 2;</code>
     * @return The lowOverhead.
     */
    @java.lang.Override
    public boolean getLowOverhead() {
      return lowOverhead_;
    }

    public static final int TRACE_METRICS_FIELD_NUMBER = 3;
    @SuppressWarnings("serial")
    private com.google.protobuf.LazyStringArrayList traceMetrics_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
    /**
     * <pre>
     * Trace metrics to capture for each render stage
     * </pre>
     *
     * <code>repeated string trace_metrics = 3;</code>
     * @return A list containing the traceMetrics.
     */
    public com.google.protobuf.ProtocolStringList
        getTraceMetricsList() {
      return traceMetrics_;
    }
    /**
     * <pre>
     * Trace metrics to capture for each render stage
     * </pre>
     *
     * <code>repeated string trace_metrics = 3;</code>
     * @return The count of traceMetrics.
     */
    public int getTraceMetricsCount() {
      return traceMetrics_.size();
    }
    /**
     * <pre>
     * Trace metrics to capture for each render stage
     * </pre>
     *
     * <code>repeated string trace_metrics = 3;</code>
     * @param index The index of the element to return.
     * @return The traceMetrics at the given index.
     */
    public java.lang.String getTraceMetrics(int index) {
      return traceMetrics_.get(index);
    }
    /**
     * <pre>
     * Trace metrics to capture for each render stage
     * </pre>
     *
     * <code>repeated string trace_metrics = 3;</code>
     * @param index The index of the value to return.
     * @return The bytes of the traceMetrics at the given index.
     */
    public com.google.protobuf.ByteString
        getTraceMetricsBytes(int index) {
      return traceMetrics_.getByteString(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeBool(1, fullLoadstore_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeBool(2, lowOverhead_);
      }
      for (int i = 0; i < traceMetrics_.size(); i++) {
        com.google.protobuf.GeneratedMessage.writeString(output, 3, traceMetrics_.getRaw(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, fullLoadstore_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, lowOverhead_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < traceMetrics_.size(); i++) {
          dataSize += computeStringSizeNoTag(traceMetrics_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getTraceMetricsList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.eclipse.tracecompass.incubator.internal.perfetto.protos.GpuRenderstagesConfig.GpuRenderStagesConfig)) {
        return super.equals(obj);
      }
      org.eclipse.tracecompass.incubator.internal.perfetto.protos.GpuRenderstagesConfig.GpuRenderStagesConfig other = (org.eclipse.tracecompass.incubator.internal.perfetto.protos.GpuRenderstagesConfig.GpuRenderStagesConfig) obj;

      if (hasFullLoadstore() != other.hasFullLoadstore()) return false;
      if (hasFullLoadstore()) {
        if (getFullLoadstore()
            != other.getFullLoadstore()) return false;
      }
      if (hasLowOverhead() != other.hasLowOverhead()) return false;
      if (hasLowOverhead()) {
        if (getLowOverhead()
            != other.getLowOverhead()) return false;
      }
      if (!getTraceMetricsList()
          .equals(other.getTraceMetricsList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasFullLoadstore()) {
        hash = (37 * hash) + FULL_LOADSTORE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getFullLoadstore());
      }
      if (hasLowOverhead()) {
        hash = (37 * hash) + LOW_OVERHEAD_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getLowOverhead());
      }
      if (getTraceMetricsCount() > 0) {
        hash = (37 * hash) + TRACE_METRICS_FIELD_NUMBER;
        hash = (53 * hash) + getTraceMetricsList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.eclipse.tracecompass.incubator.internal.perfetto.protos.GpuRenderstagesConfig.GpuRenderStagesConfig parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.eclipse.tracecompass.incubator.internal.perfetto.protos.GpuRenderstagesConfig.GpuRenderStagesConfig parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.eclipse.tracecompass.incubator.internal.perfetto.protos.GpuRenderstagesConfig.GpuRenderStagesConfig parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.eclipse.tracecompass.incubator.internal.perfetto.protos.GpuRenderstagesConfig.GpuRenderStagesConfig parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.eclipse.tracecompass.incubator.internal.perfetto.protos.GpuRenderstagesConfig.GpuRenderStagesConfig parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.eclipse.tracecompass.incubator.internal.perfetto.protos.GpuRenderstagesConfig.GpuRenderStagesConfig parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.eclipse.tracecompass.incubator.internal.perfetto.protos.GpuRenderstagesConfig.GpuRenderStagesConfig parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.eclipse.tracecompass.incubator.internal.perfetto.protos.GpuRenderstagesConfig.GpuRenderStagesConfig parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.eclipse.tracecompass.incubator.internal.perfetto.protos.GpuRenderstagesConfig.GpuRenderStagesConfig parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.eclipse.tracecompass.incubator.internal.perfetto.protos.GpuRenderstagesConfig.GpuRenderStagesConfig parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.eclipse.tracecompass.incubator.internal.perfetto.protos.GpuRenderstagesConfig.GpuRenderStagesConfig parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static org.eclipse.tracecompass.incubator.internal.perfetto.protos.GpuRenderstagesConfig.GpuRenderStagesConfig parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.eclipse.tracecompass.incubator.internal.perfetto.protos.GpuRenderstagesConfig.GpuRenderStagesConfig prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code perfetto.protos.GpuRenderStagesConfig}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:perfetto.protos.GpuRenderStagesConfig)
        org.eclipse.tracecompass.incubator.internal.perfetto.protos.GpuRenderstagesConfig.GpuRenderStagesConfigOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.eclipse.tracecompass.incubator.internal.perfetto.protos.GpuRenderstagesConfig.internal_static_perfetto_protos_GpuRenderStagesConfig_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.eclipse.tracecompass.incubator.internal.perfetto.protos.GpuRenderstagesConfig.internal_static_perfetto_protos_GpuRenderStagesConfig_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.eclipse.tracecompass.incubator.internal.perfetto.protos.GpuRenderstagesConfig.GpuRenderStagesConfig.class, org.eclipse.tracecompass.incubator.internal.perfetto.protos.GpuRenderstagesConfig.GpuRenderStagesConfig.Builder.class);
      }

      // Construct using perfetto.protos.GpuRenderstagesConfig.GpuRenderStagesConfig.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        fullLoadstore_ = false;
        lowOverhead_ = false;
        traceMetrics_ =
            com.google.protobuf.LazyStringArrayList.emptyList();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.eclipse.tracecompass.incubator.internal.perfetto.protos.GpuRenderstagesConfig.internal_static_perfetto_protos_GpuRenderStagesConfig_descriptor;
      }

      @java.lang.Override
      public org.eclipse.tracecompass.incubator.internal.perfetto.protos.GpuRenderstagesConfig.GpuRenderStagesConfig getDefaultInstanceForType() {
        return org.eclipse.tracecompass.incubator.internal.perfetto.protos.GpuRenderstagesConfig.GpuRenderStagesConfig.getDefaultInstance();
      }

      @java.lang.Override
      public org.eclipse.tracecompass.incubator.internal.perfetto.protos.GpuRenderstagesConfig.GpuRenderStagesConfig build() {
        org.eclipse.tracecompass.incubator.internal.perfetto.protos.GpuRenderstagesConfig.GpuRenderStagesConfig result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.eclipse.tracecompass.incubator.internal.perfetto.protos.GpuRenderstagesConfig.GpuRenderStagesConfig buildPartial() {
        org.eclipse.tracecompass.incubator.internal.perfetto.protos.GpuRenderstagesConfig.GpuRenderStagesConfig result = new org.eclipse.tracecompass.incubator.internal.perfetto.protos.GpuRenderstagesConfig.GpuRenderStagesConfig(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.eclipse.tracecompass.incubator.internal.perfetto.protos.GpuRenderstagesConfig.GpuRenderStagesConfig result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.fullLoadstore_ = fullLoadstore_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.lowOverhead_ = lowOverhead_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          traceMetrics_.makeImmutable();
          result.traceMetrics_ = traceMetrics_;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.eclipse.tracecompass.incubator.internal.perfetto.protos.GpuRenderstagesConfig.GpuRenderStagesConfig) {
          return mergeFrom((org.eclipse.tracecompass.incubator.internal.perfetto.protos.GpuRenderstagesConfig.GpuRenderStagesConfig)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.eclipse.tracecompass.incubator.internal.perfetto.protos.GpuRenderstagesConfig.GpuRenderStagesConfig other) {
        if (other == org.eclipse.tracecompass.incubator.internal.perfetto.protos.GpuRenderstagesConfig.GpuRenderStagesConfig.getDefaultInstance()) return this;
        if (other.hasFullLoadstore()) {
          setFullLoadstore(other.getFullLoadstore());
        }
        if (other.hasLowOverhead()) {
          setLowOverhead(other.getLowOverhead());
        }
        if (!other.traceMetrics_.isEmpty()) {
          if (traceMetrics_.isEmpty()) {
            traceMetrics_ = other.traceMetrics_;
            bitField0_ |= 0x00000004;
          } else {
            ensureTraceMetricsIsMutable();
            traceMetrics_.addAll(other.traceMetrics_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                fullLoadstore_ = input.readBool();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 16: {
                lowOverhead_ = input.readBool();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              case 26: {
                com.google.protobuf.ByteString bs = input.readBytes();
                ensureTraceMetricsIsMutable();
                traceMetrics_.add(bs);
                break;
              } // case 26
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private boolean fullLoadstore_ ;
      /**
       * <pre>
       * Enable to separate the color and depth/stencil load and store stages
       * into a separate stages. If disabled, the depth/stencil load and store
       * stages will be combined.  Disabled by default. This option has no effect if
       * Low Overhead mode is enabled.
       * </pre>
       *
       * <code>optional bool full_loadstore = 1;</code>
       * @return Whether the fullLoadstore field is set.
       */
      @java.lang.Override
      public boolean hasFullLoadstore() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Enable to separate the color and depth/stencil load and store stages
       * into a separate stages. If disabled, the depth/stencil load and store
       * stages will be combined.  Disabled by default. This option has no effect if
       * Low Overhead mode is enabled.
       * </pre>
       *
       * <code>optional bool full_loadstore = 1;</code>
       * @return The fullLoadstore.
       */
      @java.lang.Override
      public boolean getFullLoadstore() {
        return fullLoadstore_;
      }
      /**
       * <pre>
       * Enable to separate the color and depth/stencil load and store stages
       * into a separate stages. If disabled, the depth/stencil load and store
       * stages will be combined.  Disabled by default. This option has no effect if
       * Low Overhead mode is enabled.
       * </pre>
       *
       * <code>optional bool full_loadstore = 1;</code>
       * @param value The fullLoadstore to set.
       * @return This builder for chaining.
       */
      public Builder setFullLoadstore(boolean value) {

        fullLoadstore_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Enable to separate the color and depth/stencil load and store stages
       * into a separate stages. If disabled, the depth/stencil load and store
       * stages will be combined.  Disabled by default. This option has no effect if
       * Low Overhead mode is enabled.
       * </pre>
       *
       * <code>optional bool full_loadstore = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearFullLoadstore() {
        bitField0_ = (bitField0_ & ~0x00000001);
        fullLoadstore_ = false;
        onChanged();
        return this;
      }

      private boolean lowOverhead_ ;
      /**
       * <pre>
       * Use the low overhead mode for traces. In this mode render stages are
       * combined into a single workload stage. This provides less granular data but
       * induces minimal GPU overhead. Disabled by default.
       * </pre>
       *
       * <code>optional bool low_overhead = 2;</code>
       * @return Whether the lowOverhead field is set.
       */
      @java.lang.Override
      public boolean hasLowOverhead() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * Use the low overhead mode for traces. In this mode render stages are
       * combined into a single workload stage. This provides less granular data but
       * induces minimal GPU overhead. Disabled by default.
       * </pre>
       *
       * <code>optional bool low_overhead = 2;</code>
       * @return The lowOverhead.
       */
      @java.lang.Override
      public boolean getLowOverhead() {
        return lowOverhead_;
      }
      /**
       * <pre>
       * Use the low overhead mode for traces. In this mode render stages are
       * combined into a single workload stage. This provides less granular data but
       * induces minimal GPU overhead. Disabled by default.
       * </pre>
       *
       * <code>optional bool low_overhead = 2;</code>
       * @param value The lowOverhead to set.
       * @return This builder for chaining.
       */
      public Builder setLowOverhead(boolean value) {

        lowOverhead_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Use the low overhead mode for traces. In this mode render stages are
       * combined into a single workload stage. This provides less granular data but
       * induces minimal GPU overhead. Disabled by default.
       * </pre>
       *
       * <code>optional bool low_overhead = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearLowOverhead() {
        bitField0_ = (bitField0_ & ~0x00000002);
        lowOverhead_ = false;
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringArrayList traceMetrics_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
      private void ensureTraceMetricsIsMutable() {
        if (!traceMetrics_.isModifiable()) {
          traceMetrics_ = new com.google.protobuf.LazyStringArrayList(traceMetrics_);
        }
        bitField0_ |= 0x00000004;
      }
      /**
       * <pre>
       * Trace metrics to capture for each render stage
       * </pre>
       *
       * <code>repeated string trace_metrics = 3;</code>
       * @return A list containing the traceMetrics.
       */
      public com.google.protobuf.ProtocolStringList
          getTraceMetricsList() {
        traceMetrics_.makeImmutable();
        return traceMetrics_;
      }
      /**
       * <pre>
       * Trace metrics to capture for each render stage
       * </pre>
       *
       * <code>repeated string trace_metrics = 3;</code>
       * @return The count of traceMetrics.
       */
      public int getTraceMetricsCount() {
        return traceMetrics_.size();
      }
      /**
       * <pre>
       * Trace metrics to capture for each render stage
       * </pre>
       *
       * <code>repeated string trace_metrics = 3;</code>
       * @param index The index of the element to return.
       * @return The traceMetrics at the given index.
       */
      public java.lang.String getTraceMetrics(int index) {
        return traceMetrics_.get(index);
      }
      /**
       * <pre>
       * Trace metrics to capture for each render stage
       * </pre>
       *
       * <code>repeated string trace_metrics = 3;</code>
       * @param index The index of the value to return.
       * @return The bytes of the traceMetrics at the given index.
       */
      public com.google.protobuf.ByteString
          getTraceMetricsBytes(int index) {
        return traceMetrics_.getByteString(index);
      }
      /**
       * <pre>
       * Trace metrics to capture for each render stage
       * </pre>
       *
       * <code>repeated string trace_metrics = 3;</code>
       * @param index The index to set the value at.
       * @param value The traceMetrics to set.
       * @return This builder for chaining.
       */
      public Builder setTraceMetrics(
          int index, java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureTraceMetricsIsMutable();
        traceMetrics_.set(index, value);
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Trace metrics to capture for each render stage
       * </pre>
       *
       * <code>repeated string trace_metrics = 3;</code>
       * @param value The traceMetrics to add.
       * @return This builder for chaining.
       */
      public Builder addTraceMetrics(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureTraceMetricsIsMutable();
        traceMetrics_.add(value);
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Trace metrics to capture for each render stage
       * </pre>
       *
       * <code>repeated string trace_metrics = 3;</code>
       * @param values The traceMetrics to add.
       * @return This builder for chaining.
       */
      public Builder addAllTraceMetrics(
          java.lang.Iterable<java.lang.String> values) {
        ensureTraceMetricsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, traceMetrics_);
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Trace metrics to capture for each render stage
       * </pre>
       *
       * <code>repeated string trace_metrics = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearTraceMetrics() {
        traceMetrics_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Trace metrics to capture for each render stage
       * </pre>
       *
       * <code>repeated string trace_metrics = 3;</code>
       * @param value The bytes of the traceMetrics to add.
       * @return This builder for chaining.
       */
      public Builder addTraceMetricsBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        ensureTraceMetricsIsMutable();
        traceMetrics_.add(value);
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:perfetto.protos.GpuRenderStagesConfig)
    }

    // @@protoc_insertion_point(class_scope:perfetto.protos.GpuRenderStagesConfig)
    private static final org.eclipse.tracecompass.incubator.internal.perfetto.protos.GpuRenderstagesConfig.GpuRenderStagesConfig DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.eclipse.tracecompass.incubator.internal.perfetto.protos.GpuRenderstagesConfig.GpuRenderStagesConfig();
    }

    public static org.eclipse.tracecompass.incubator.internal.perfetto.protos.GpuRenderstagesConfig.GpuRenderStagesConfig getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<GpuRenderStagesConfig>
        PARSER = new com.google.protobuf.AbstractParser<GpuRenderStagesConfig>() {
      @java.lang.Override
      public GpuRenderStagesConfig parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<GpuRenderStagesConfig> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<GpuRenderStagesConfig> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.eclipse.tracecompass.incubator.internal.perfetto.protos.GpuRenderstagesConfig.GpuRenderStagesConfig getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfetto_protos_GpuRenderStagesConfig_descriptor;
  private static final
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_perfetto_protos_GpuRenderStagesConfig_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n8protos/perfetto/config/gpu/gpu_renders" +
      "tages_config.proto\022\017perfetto.protos\"\\\n\025G" +
      "puRenderStagesConfig\022\026\n\016full_loadstore\030\001" +
      " \001(\010\022\024\n\014low_overhead\030\002 \001(\010\022\025\n\rtrace_metr" +
      "ics\030\003 \003(\t"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_perfetto_protos_GpuRenderStagesConfig_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_perfetto_protos_GpuRenderStagesConfig_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_perfetto_protos_GpuRenderStagesConfig_descriptor,
        new java.lang.String[] { "FullLoadstore", "LowOverhead", "TraceMetrics", });
    descriptor.resolveAllFeaturesImmutable();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
