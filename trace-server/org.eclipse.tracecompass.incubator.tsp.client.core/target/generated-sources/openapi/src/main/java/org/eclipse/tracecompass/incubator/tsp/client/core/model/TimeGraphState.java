/*
 * Trace Server Protocol
 * Open source REST API for viewing and analyzing any type of logs or traces. Its goal is to provide models to populate views, graphs, metrics, and more to help extract useful information from traces, in a way that is more user-friendly and informative than huge text dumps.
 *
 * The version of the OpenAPI document: 0.6.0
 * Contact: tracecompass-dev@eclipse.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.eclipse.tracecompass.incubator.tsp.client.core.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import org.eclipse.tracecompass.incubator.tsp.client.core.model.OutputElementStyle;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import org.eclipse.tracecompass.incubator.tsp.client.core.JSON;


/**
 * TimeGraphState
 */
@JsonPropertyOrder({
  TimeGraphState.JSON_PROPERTY_TAGS,
  TimeGraphState.JSON_PROPERTY_END,
  TimeGraphState.JSON_PROPERTY_STYLE,
  TimeGraphState.JSON_PROPERTY_LABEL,
  TimeGraphState.JSON_PROPERTY_START
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.15.0")
public class TimeGraphState {
  public static final String JSON_PROPERTY_TAGS = "tags";
  @javax.annotation.Nullable
  private Integer tags;

  public static final String JSON_PROPERTY_END = "end";
  @javax.annotation.Nonnull
  private Long end;

  public static final String JSON_PROPERTY_STYLE = "style";
  @javax.annotation.Nullable
  private OutputElementStyle style;

  public static final String JSON_PROPERTY_LABEL = "label";
  @javax.annotation.Nullable
  private String label;

  public static final String JSON_PROPERTY_START = "start";
  @javax.annotation.Nonnull
  private Long start;

  public TimeGraphState() { 
  }

  public TimeGraphState tags(@javax.annotation.Nullable Integer tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Tags to apply on this state. A value of 0 should be handled as none (no tags)
   * @return tags
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TAGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getTags() {
    return tags;
  }


  @JsonProperty(JSON_PROPERTY_TAGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTags(@javax.annotation.Nullable Integer tags) {
    this.tags = tags;
  }


  public TimeGraphState end(@javax.annotation.Nonnull Long end) {
    this.end = end;
    return this;
  }

  /**
   * End time for this state
   * @return end
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_END)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getEnd() {
    return end;
  }


  @JsonProperty(JSON_PROPERTY_END)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEnd(@javax.annotation.Nonnull Long end) {
    this.end = end;
  }


  public TimeGraphState style(@javax.annotation.Nullable OutputElementStyle style) {
    this.style = style;
    return this;
  }

  /**
   * Get style
   * @return style
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STYLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OutputElementStyle getStyle() {
    return style;
  }


  @JsonProperty(JSON_PROPERTY_STYLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStyle(@javax.annotation.Nullable OutputElementStyle style) {
    this.style = style;
  }


  public TimeGraphState label(@javax.annotation.Nullable String label) {
    this.label = label;
    return this;
  }

  /**
   * Text label to apply to this TimeGraphState if resolution permits. Optional, no label is applied if absent
   * @return label
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LABEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLabel() {
    return label;
  }


  @JsonProperty(JSON_PROPERTY_LABEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLabel(@javax.annotation.Nullable String label) {
    this.label = label;
  }


  public TimeGraphState start(@javax.annotation.Nonnull Long start) {
    this.start = start;
    return this;
  }

  /**
   * Start time for this state
   * @return start
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_START)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getStart() {
    return start;
  }


  @JsonProperty(JSON_PROPERTY_START)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStart(@javax.annotation.Nonnull Long start) {
    this.start = start;
  }


  /**
   * Return true if this TimeGraphState object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TimeGraphState timeGraphState = (TimeGraphState) o;
    return Objects.equals(this.tags, timeGraphState.tags) &&
        Objects.equals(this.end, timeGraphState.end) &&
        Objects.equals(this.style, timeGraphState.style) &&
        Objects.equals(this.label, timeGraphState.label) &&
        Objects.equals(this.start, timeGraphState.start);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tags, end, style, label, start);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TimeGraphState {\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    end: ").append(toIndentedString(end)).append("\n");
    sb.append("    style: ").append(toIndentedString(style)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

