/*
 * Trace Server Protocol
 * Open source REST API for viewing and analyzing any type of logs or traces. Its goal is to provide models to populate views, graphs, metrics, and more to help extract useful information from traces, in a way that is more user-friendly and informative than huge text dumps.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: tracecompass-dev@eclipse.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.eclipse.tracecompass.incubator.tsp.client.core.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.eclipse.tracecompass.incubator.tsp.client.core.model.VirtualTableCell;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import org.eclipse.tracecompass.incubator.tsp.client.core.JSON;


/**
 * VirtualTableLine
 */
@JsonPropertyOrder({
  VirtualTableLine.JSON_PROPERTY_TAGS,
  VirtualTableLine.JSON_PROPERTY_CELLS,
  VirtualTableLine.JSON_PROPERTY_INDEX
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-19T10:33:13.979273368-04:00[America/Toronto]", comments = "Generator version: 7.15.0")
public class VirtualTableLine {
  public static final String JSON_PROPERTY_TAGS = "tags";
  @javax.annotation.Nullable
  private Integer tags;

  public static final String JSON_PROPERTY_CELLS = "cells";
  @javax.annotation.Nonnull
  private List<VirtualTableCell> cells = new ArrayList<>();

  public static final String JSON_PROPERTY_INDEX = "index";
  @javax.annotation.Nonnull
  private Long index;

  public VirtualTableLine() { 
  }

  public VirtualTableLine tags(@javax.annotation.Nullable Integer tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Optional tags for the entire line. A bit mask to apply for tagging elements (e.g. table lines, states). This can be used by the server to indicate if a filter matches and what action to apply. Use 0 for no tags, 1 and 2 are reserved, 4 for &#39;BORDER&#39; and 8 for &#39;HIGHLIGHT&#39;.
   * @return tags
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TAGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getTags() {
    return tags;
  }


  @JsonProperty(JSON_PROPERTY_TAGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTags(@javax.annotation.Nullable Integer tags) {
    this.tags = tags;
  }


  public VirtualTableLine cells(@javax.annotation.Nonnull List<VirtualTableCell> cells) {
    this.cells = cells;
    return this;
  }

  public VirtualTableLine addCellsItem(VirtualTableCell cellsItem) {
    if (this.cells == null) {
      this.cells = new ArrayList<>();
    }
    this.cells.add(cellsItem);
    return this;
  }

  /**
   * The content of the cells for this line. This array matches the column ids returned above
   * @return cells
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CELLS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<VirtualTableCell> getCells() {
    return cells;
  }


  @JsonProperty(JSON_PROPERTY_CELLS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCells(@javax.annotation.Nonnull List<VirtualTableCell> cells) {
    this.cells = cells;
  }


  public VirtualTableLine index(@javax.annotation.Nonnull Long index) {
    this.index = index;
    return this;
  }

  /**
   * The index of this line in the virtual table
   * @return index
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_INDEX)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getIndex() {
    return index;
  }


  @JsonProperty(JSON_PROPERTY_INDEX)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIndex(@javax.annotation.Nonnull Long index) {
    this.index = index;
  }


  /**
   * Return true if this VirtualTableLine object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VirtualTableLine virtualTableLine = (VirtualTableLine) o;
    return Objects.equals(this.tags, virtualTableLine.tags) &&
        Objects.equals(this.cells, virtualTableLine.cells) &&
        Objects.equals(this.index, virtualTableLine.index);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tags, cells, index);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VirtualTableLine {\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    cells: ").append(toIndentedString(cells)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

