/*
 * Trace Server Protocol
 * Open source REST API for viewing and analyzing any type of logs or traces. Its goal is to provide models to populate views, graphs, metrics, and more to help extract useful information from traces, in a way that is more user-friendly and informative than huge text dumps.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: tracecompass-dev@eclipse.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.eclipse.tracecompass.incubator.tsp.client.core.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import org.eclipse.tracecompass.incubator.tsp.client.core.model.XYAxisDescriptionAxisDomain;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import org.eclipse.tracecompass.incubator.tsp.client.core.JSON;


/**
 * Describes a single axis in an XY chart, including label, unit, data type, and optional domain.
 */
@JsonPropertyOrder({
  XYAxisDescription.JSON_PROPERTY_DATA_TYPE,
  XYAxisDescription.JSON_PROPERTY_UNIT,
  XYAxisDescription.JSON_PROPERTY_LABEL,
  XYAxisDescription.JSON_PROPERTY_AXIS_DOMAIN
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-19T10:33:13.979273368-04:00[America/Toronto]", comments = "Generator version: 7.15.0")
public class XYAxisDescription {
  /**
   * The type of data this axis represents
   */
  public enum DataTypeEnum {
    NUMBER(String.valueOf("NUMBER")),
    
    BINARY_NUMBER(String.valueOf("BINARY_NUMBER")),
    
    TIMESTAMP(String.valueOf("TIMESTAMP")),
    
    DURATION(String.valueOf("DURATION")),
    
    STRING(String.valueOf("STRING")),
    
    TIME_RANGE(String.valueOf("TIME_RANGE"));

    private String value;

    DataTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DataTypeEnum fromValue(String value) {
      for (DataTypeEnum b : DataTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_DATA_TYPE = "dataType";
  @javax.annotation.Nonnull
  private DataTypeEnum dataType;

  public static final String JSON_PROPERTY_UNIT = "unit";
  @javax.annotation.Nonnull
  private String unit;

  public static final String JSON_PROPERTY_LABEL = "label";
  @javax.annotation.Nonnull
  private String label;

  public static final String JSON_PROPERTY_AXIS_DOMAIN = "axisDomain";
  @javax.annotation.Nullable
  private XYAxisDescriptionAxisDomain axisDomain;

  public XYAxisDescription() { 
  }

  public XYAxisDescription dataType(@javax.annotation.Nonnull DataTypeEnum dataType) {
    this.dataType = dataType;
    return this;
  }

  /**
   * The type of data this axis represents
   * @return dataType
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DATA_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public DataTypeEnum getDataType() {
    return dataType;
  }


  @JsonProperty(JSON_PROPERTY_DATA_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDataType(@javax.annotation.Nonnull DataTypeEnum dataType) {
    this.dataType = dataType;
  }


  public XYAxisDescription unit(@javax.annotation.Nonnull String unit) {
    this.unit = unit;
    return this;
  }

  /**
   * Unit associated with this axis (e.g., ns, ms)
   * @return unit
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_UNIT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getUnit() {
    return unit;
  }


  @JsonProperty(JSON_PROPERTY_UNIT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUnit(@javax.annotation.Nonnull String unit) {
    this.unit = unit;
  }


  public XYAxisDescription label(@javax.annotation.Nonnull String label) {
    this.label = label;
    return this;
  }

  /**
   * Label for the axis
   * @return label
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LABEL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getLabel() {
    return label;
  }


  @JsonProperty(JSON_PROPERTY_LABEL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLabel(@javax.annotation.Nonnull String label) {
    this.label = label;
  }


  public XYAxisDescription axisDomain(@javax.annotation.Nullable XYAxisDescriptionAxisDomain axisDomain) {
    this.axisDomain = axisDomain;
    return this;
  }

  /**
   * Get axisDomain
   * @return axisDomain
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AXIS_DOMAIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public XYAxisDescriptionAxisDomain getAxisDomain() {
    return axisDomain;
  }


  @JsonProperty(JSON_PROPERTY_AXIS_DOMAIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAxisDomain(@javax.annotation.Nullable XYAxisDescriptionAxisDomain axisDomain) {
    this.axisDomain = axisDomain;
  }


  /**
   * Return true if this XYAxisDescription object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    XYAxisDescription xyAxisDescription = (XYAxisDescription) o;
    return Objects.equals(this.dataType, xyAxisDescription.dataType) &&
        Objects.equals(this.unit, xyAxisDescription.unit) &&
        Objects.equals(this.label, xyAxisDescription.label) &&
        Objects.equals(this.axisDomain, xyAxisDescription.axisDomain);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataType, unit, label, axisDomain);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class XYAxisDescription {\n");
    sb.append("    dataType: ").append(toIndentedString(dataType)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    axisDomain: ").append(toIndentedString(axisDomain)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

