/*
 * Trace Server Protocol
 * Open source REST API for viewing and analyzing any type of logs or traces. Its goal is to provide models to populate views, graphs, metrics, and more to help extract useful information from traces, in a way that is more user-friendly and informative than huge text dumps.
 *
 * The version of the OpenAPI document: 0.6.0
 * Contact: tracecompass-dev@eclipse.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.eclipse.tracecompass.incubator.tsp.client.core.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.eclipse.tracecompass.incubator.tsp.client.core.model.Trace;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import org.eclipse.tracecompass.incubator.tsp.client.core.JSON;


/**
 * Experiment model
 */
@JsonPropertyOrder({
  Experiment.JSON_PROPERTY_TRACES,
  Experiment.JSON_PROPERTY_END,
  Experiment.JSON_PROPERTY_NB_EVENTS,
  Experiment.JSON_PROPERTY_INDEXING_STATUS,
  Experiment.JSON_PROPERTY_NAME,
  Experiment.JSON_PROPERTY_START,
  Experiment.JSON_PROPERTY_U_U_I_D
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.15.0")
public class Experiment {
  public static final String JSON_PROPERTY_TRACES = "traces";
  @javax.annotation.Nonnull
  private List<Trace> traces = new ArrayList<>();

  public static final String JSON_PROPERTY_END = "end";
  @javax.annotation.Nonnull
  private Long end;

  public static final String JSON_PROPERTY_NB_EVENTS = "nbEvents";
  @javax.annotation.Nonnull
  private Long nbEvents;

  /**
   * Status of the experiment indexing
   */
  public enum IndexingStatusEnum {
    RUNNING(String.valueOf("RUNNING")),
    
    COMPLETED(String.valueOf("COMPLETED")),
    
    CLOSED(String.valueOf("CLOSED"));

    private String value;

    IndexingStatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static IndexingStatusEnum fromValue(String value) {
      for (IndexingStatusEnum b : IndexingStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_INDEXING_STATUS = "indexingStatus";
  @javax.annotation.Nonnull
  private IndexingStatusEnum indexingStatus;

  public static final String JSON_PROPERTY_NAME = "name";
  @javax.annotation.Nonnull
  private String name;

  public static final String JSON_PROPERTY_START = "start";
  @javax.annotation.Nonnull
  private Long start;

  public static final String JSON_PROPERTY_U_U_I_D = "UUID";
  @javax.annotation.Nonnull
  private UUID uuid;

  public Experiment() { 
  }

  public Experiment traces(@javax.annotation.Nonnull List<Trace> traces) {
    this.traces = traces;
    return this;
  }

  public Experiment addTracesItem(Trace tracesItem) {
    if (this.traces == null) {
      this.traces = new ArrayList<>();
    }
    this.traces.add(tracesItem);
    return this;
  }

  /**
   * The traces encapsulated by this experiment
   * @return traces
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TRACES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<Trace> getTraces() {
    return traces;
  }


  @JsonProperty(JSON_PROPERTY_TRACES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTraces(@javax.annotation.Nonnull List<Trace> traces) {
    this.traces = traces;
  }


  public Experiment end(@javax.annotation.Nonnull Long end) {
    this.end = end;
    return this;
  }

  /**
   * The experiment&#39;s end time
   * @return end
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_END)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getEnd() {
    return end;
  }


  @JsonProperty(JSON_PROPERTY_END)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEnd(@javax.annotation.Nonnull Long end) {
    this.end = end;
  }


  public Experiment nbEvents(@javax.annotation.Nonnull Long nbEvents) {
    this.nbEvents = nbEvents;
    return this;
  }

  /**
   * Current number of indexed events in the experiment
   * @return nbEvents
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NB_EVENTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getNbEvents() {
    return nbEvents;
  }


  @JsonProperty(JSON_PROPERTY_NB_EVENTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNbEvents(@javax.annotation.Nonnull Long nbEvents) {
    this.nbEvents = nbEvents;
  }


  public Experiment indexingStatus(@javax.annotation.Nonnull IndexingStatusEnum indexingStatus) {
    this.indexingStatus = indexingStatus;
    return this;
  }

  /**
   * Status of the experiment indexing
   * @return indexingStatus
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_INDEXING_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public IndexingStatusEnum getIndexingStatus() {
    return indexingStatus;
  }


  @JsonProperty(JSON_PROPERTY_INDEXING_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIndexingStatus(@javax.annotation.Nonnull IndexingStatusEnum indexingStatus) {
    this.indexingStatus = indexingStatus;
  }


  public Experiment name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * User defined name for the experiment
   * @return name
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public Experiment start(@javax.annotation.Nonnull Long start) {
    this.start = start;
    return this;
  }

  /**
   * The experiment&#39;s start time
   * @return start
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_START)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getStart() {
    return start;
  }


  @JsonProperty(JSON_PROPERTY_START)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStart(@javax.annotation.Nonnull Long start) {
    this.start = start;
  }


  public Experiment uuid(@javax.annotation.Nonnull UUID uuid) {
    this.uuid = uuid;
    return this;
  }

  /**
   * The experiment&#39;s unique identifier
   * @return uuid
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_U_U_I_D)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getUUID() {
    return uuid;
  }


  @JsonProperty(JSON_PROPERTY_U_U_I_D)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUUID(@javax.annotation.Nonnull UUID uuid) {
    this.uuid = uuid;
  }


  /**
   * Return true if this Experiment object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Experiment experiment = (Experiment) o;
    return Objects.equals(this.traces, experiment.traces) &&
        Objects.equals(this.end, experiment.end) &&
        Objects.equals(this.nbEvents, experiment.nbEvents) &&
        Objects.equals(this.indexingStatus, experiment.indexingStatus) &&
        Objects.equals(this.name, experiment.name) &&
        Objects.equals(this.start, experiment.start) &&
        Objects.equals(this.uuid, experiment.uuid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(traces, end, nbEvents, indexingStatus, name, start, uuid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Experiment {\n");
    sb.append("    traces: ").append(toIndentedString(traces)).append("\n");
    sb.append("    end: ").append(toIndentedString(end)).append("\n");
    sb.append("    nbEvents: ").append(toIndentedString(nbEvents)).append("\n");
    sb.append("    indexingStatus: ").append(toIndentedString(indexingStatus)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

