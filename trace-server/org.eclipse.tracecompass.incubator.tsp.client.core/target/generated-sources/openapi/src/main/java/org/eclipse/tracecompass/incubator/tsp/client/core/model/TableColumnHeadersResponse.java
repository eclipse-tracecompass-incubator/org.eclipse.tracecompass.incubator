/*
 * Trace Server Protocol
 * Open source REST API for viewing and analyzing any type of logs or traces. Its goal is to provide models to populate views, graphs, metrics, and more to help extract useful information from traces, in a way that is more user-friendly and informative than huge text dumps.
 *
 * The version of the OpenAPI document: 0.6.0
 * Contact: tracecompass-dev@eclipse.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.eclipse.tracecompass.incubator.tsp.client.core.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.eclipse.tracecompass.incubator.tsp.client.core.model.TableColumnHeader;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import org.eclipse.tracecompass.incubator.tsp.client.core.JSON;


/**
 * TableColumnHeadersResponse
 */
@JsonPropertyOrder({
  TableColumnHeadersResponse.JSON_PROPERTY_STATUS_MESSAGE,
  TableColumnHeadersResponse.JSON_PROPERTY_STATUS,
  TableColumnHeadersResponse.JSON_PROPERTY_MODEL
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.15.0")
public class TableColumnHeadersResponse {
  public static final String JSON_PROPERTY_STATUS_MESSAGE = "statusMessage";
  @javax.annotation.Nonnull
  private String statusMessage;

  /**
   * All possible statuses for a server response
   */
  public enum StatusEnum {
    RUNNING(String.valueOf("RUNNING")),
    
    COMPLETED(String.valueOf("COMPLETED")),
    
    FAILED(String.valueOf("FAILED")),
    
    CANCELLED(String.valueOf("CANCELLED"));

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_STATUS = "status";
  @javax.annotation.Nonnull
  private StatusEnum status;

  public static final String JSON_PROPERTY_MODEL = "model";
  @javax.annotation.Nullable
  private List<TableColumnHeader> model = new ArrayList<>();

  public TableColumnHeadersResponse() { 
  }

  public TableColumnHeadersResponse statusMessage(@javax.annotation.Nonnull String statusMessage) {
    this.statusMessage = statusMessage;
    return this;
  }

  /**
   * Get statusMessage
   * @return statusMessage
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STATUS_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getStatusMessage() {
    return statusMessage;
  }


  @JsonProperty(JSON_PROPERTY_STATUS_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStatusMessage(@javax.annotation.Nonnull String statusMessage) {
    this.statusMessage = statusMessage;
  }


  public TableColumnHeadersResponse status(@javax.annotation.Nonnull StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * All possible statuses for a server response
   * @return status
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public StatusEnum getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStatus(@javax.annotation.Nonnull StatusEnum status) {
    this.status = status;
  }


  public TableColumnHeadersResponse model(@javax.annotation.Nullable List<TableColumnHeader> model) {
    this.model = model;
    return this;
  }

  public TableColumnHeadersResponse addModelItem(TableColumnHeader modelItem) {
    if (this.model == null) {
      this.model = new ArrayList<>();
    }
    this.model.add(modelItem);
    return this;
  }

  /**
   * Get model
   * @return model
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MODEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<TableColumnHeader> getModel() {
    return model;
  }


  @JsonProperty(JSON_PROPERTY_MODEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setModel(@javax.annotation.Nullable List<TableColumnHeader> model) {
    this.model = model;
  }


  /**
   * Return true if this TableColumnHeadersResponse object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TableColumnHeadersResponse tableColumnHeadersResponse = (TableColumnHeadersResponse) o;
    return Objects.equals(this.statusMessage, tableColumnHeadersResponse.statusMessage) &&
        Objects.equals(this.status, tableColumnHeadersResponse.status) &&
        Objects.equals(this.model, tableColumnHeadersResponse.model);
  }

  @Override
  public int hashCode() {
    return Objects.hash(statusMessage, status, model);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TableColumnHeadersResponse {\n");
    sb.append("    statusMessage: ").append(toIndentedString(statusMessage)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

