/*
 * Trace Server Protocol
 * Open source REST API for viewing and analyzing any type of logs or traces. Its goal is to provide models to populate views, graphs, metrics, and more to help extract useful information from traces, in a way that is more user-friendly and informative than huge text dumps.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: tracecompass-dev@eclipse.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.eclipse.tracecompass.incubator.tsp.client.core.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.eclipse.tracecompass.incubator.tsp.client.core.model.DataTreeEntry;
import org.eclipse.tracecompass.incubator.tsp.client.core.model.TreeColumnHeader;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import org.eclipse.tracecompass.incubator.tsp.client.core.JSON;


/**
 * DataTreeEntryModel
 */
@JsonPropertyOrder({
  DataTreeEntryModel.JSON_PROPERTY_AUTO_EXPAND_LEVEL,
  DataTreeEntryModel.JSON_PROPERTY_ENTRIES,
  DataTreeEntryModel.JSON_PROPERTY_HEADERS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-19T10:33:13.979273368-04:00[America/Toronto]", comments = "Generator version: 7.15.0")
public class DataTreeEntryModel {
  public static final String JSON_PROPERTY_AUTO_EXPAND_LEVEL = "autoExpandLevel";
  @javax.annotation.Nullable
  private Integer autoExpandLevel;

  public static final String JSON_PROPERTY_ENTRIES = "entries";
  @javax.annotation.Nonnull
  private List<DataTreeEntry> entries = new ArrayList<>();

  public static final String JSON_PROPERTY_HEADERS = "headers";
  @javax.annotation.Nonnull
  private List<TreeColumnHeader> headers = new ArrayList<>();

  public DataTreeEntryModel() { 
  }

  public DataTreeEntryModel autoExpandLevel(@javax.annotation.Nullable Integer autoExpandLevel) {
    this.autoExpandLevel = autoExpandLevel;
    return this;
  }

  /**
   * Optional auto-expand level to be used for the input of the tree. If omitted or value -1 means that all subtrees should be expanded. The value 0 means that there is no auto-expand; 1 means that top-level elements are expanded, but not their children; 2 means that top-level elements are expanded, and their children, but not grand-children; and so on.
   * @return autoExpandLevel
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AUTO_EXPAND_LEVEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getAutoExpandLevel() {
    return autoExpandLevel;
  }


  @JsonProperty(JSON_PROPERTY_AUTO_EXPAND_LEVEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAutoExpandLevel(@javax.annotation.Nullable Integer autoExpandLevel) {
    this.autoExpandLevel = autoExpandLevel;
  }


  public DataTreeEntryModel entries(@javax.annotation.Nonnull List<DataTreeEntry> entries) {
    this.entries = entries;
    return this;
  }

  public DataTreeEntryModel addEntriesItem(DataTreeEntry entriesItem) {
    if (this.entries == null) {
      this.entries = new ArrayList<>();
    }
    this.entries.add(entriesItem);
    return this;
  }

  /**
   * Get entries
   * @return entries
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ENTRIES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<DataTreeEntry> getEntries() {
    return entries;
  }


  @JsonProperty(JSON_PROPERTY_ENTRIES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEntries(@javax.annotation.Nonnull List<DataTreeEntry> entries) {
    this.entries = entries;
  }


  public DataTreeEntryModel headers(@javax.annotation.Nonnull List<TreeColumnHeader> headers) {
    this.headers = headers;
    return this;
  }

  public DataTreeEntryModel addHeadersItem(TreeColumnHeader headersItem) {
    if (this.headers == null) {
      this.headers = new ArrayList<>();
    }
    this.headers.add(headersItem);
    return this;
  }

  /**
   * Get headers
   * @return headers
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_HEADERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<TreeColumnHeader> getHeaders() {
    return headers;
  }


  @JsonProperty(JSON_PROPERTY_HEADERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setHeaders(@javax.annotation.Nonnull List<TreeColumnHeader> headers) {
    this.headers = headers;
  }


  /**
   * Return true if this DataTreeEntryModel object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataTreeEntryModel dataTreeEntryModel = (DataTreeEntryModel) o;
    return Objects.equals(this.autoExpandLevel, dataTreeEntryModel.autoExpandLevel) &&
        Objects.equals(this.entries, dataTreeEntryModel.entries) &&
        Objects.equals(this.headers, dataTreeEntryModel.headers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoExpandLevel, entries, headers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataTreeEntryModel {\n");
    sb.append("    autoExpandLevel: ").append(toIndentedString(autoExpandLevel)).append("\n");
    sb.append("    entries: ").append(toIndentedString(entries)).append("\n");
    sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

