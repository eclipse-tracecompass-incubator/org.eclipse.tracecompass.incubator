/*
 * Trace Server Protocol
 * Open source REST API for viewing and analyzing any type of logs or traces. Its goal is to provide models to populate views, graphs, metrics, and more to help extract useful information from traces, in a way that is more user-friendly and informative than huge text dumps.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: tracecompass-dev@eclipse.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.eclipse.tracecompass.incubator.tsp.client.core.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import org.eclipse.tracecompass.incubator.tsp.client.core.JSON;


/**
 * A list of configuration parameter descriptors to be passed when creating or updating a configuration instance of this type. Use this instead of schema. Omit if not used.
 */
@JsonPropertyOrder({
  ConfigurationParameterDescriptor.JSON_PROPERTY_DATA_TYPE,
  ConfigurationParameterDescriptor.JSON_PROPERTY_KEY_NAME,
  ConfigurationParameterDescriptor.JSON_PROPERTY_REQUIRED,
  ConfigurationParameterDescriptor.JSON_PROPERTY_DESCRIPTION
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-19T10:33:13.979273368-04:00[America/Toronto]", comments = "Generator version: 7.15.0")
public class ConfigurationParameterDescriptor {
  public static final String JSON_PROPERTY_DATA_TYPE = "dataType";
  @javax.annotation.Nullable
  private String dataType;

  public static final String JSON_PROPERTY_KEY_NAME = "keyName";
  @javax.annotation.Nonnull
  private String keyName;

  public static final String JSON_PROPERTY_REQUIRED = "required";
  @javax.annotation.Nullable
  private Boolean required;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  @javax.annotation.Nullable
  private String description;

  public ConfigurationParameterDescriptor() { 
  }

  public ConfigurationParameterDescriptor dataType(@javax.annotation.Nullable String dataType) {
    this.dataType = dataType;
    return this;
  }

  /**
   * Optional data type hint of the configuration parameter. For example, use NUMBER for numbers, or STRING as strings. If omitted assume the default value is STRING.
   * @return dataType
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DATA_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDataType() {
    return dataType;
  }


  @JsonProperty(JSON_PROPERTY_DATA_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDataType(@javax.annotation.Nullable String dataType) {
    this.dataType = dataType;
  }


  public ConfigurationParameterDescriptor keyName(@javax.annotation.Nonnull String keyName) {
    this.keyName = keyName;
    return this;
  }

  /**
   * The unique key name of the configuration parameter
   * @return keyName
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_KEY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getKeyName() {
    return keyName;
  }


  @JsonProperty(JSON_PROPERTY_KEY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setKeyName(@javax.annotation.Nonnull String keyName) {
    this.keyName = keyName;
  }


  public ConfigurationParameterDescriptor required(@javax.annotation.Nullable Boolean required) {
    this.required = required;
    return this;
  }

  /**
   * Optional flag indicating whether the configuration parameter is required or not. If ommitted the default value is false.
   * @return required
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REQUIRED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getRequired() {
    return required;
  }


  @JsonProperty(JSON_PROPERTY_REQUIRED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRequired(@javax.annotation.Nullable Boolean required) {
    this.required = required;
  }


  public ConfigurationParameterDescriptor description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Optional, describes the configuration parameter
   * @return description
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  /**
   * Return true if this ConfigurationParameterDescriptor object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigurationParameterDescriptor configurationParameterDescriptor = (ConfigurationParameterDescriptor) o;
    return Objects.equals(this.dataType, configurationParameterDescriptor.dataType) &&
        Objects.equals(this.keyName, configurationParameterDescriptor.keyName) &&
        Objects.equals(this.required, configurationParameterDescriptor.required) &&
        Objects.equals(this.description, configurationParameterDescriptor.description);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataType, keyName, required, description);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigurationParameterDescriptor {\n");
    sb.append("    dataType: ").append(toIndentedString(dataType)).append("\n");
    sb.append("    keyName: ").append(toIndentedString(keyName)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

