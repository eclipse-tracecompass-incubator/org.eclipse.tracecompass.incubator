/*
 * Trace Server Protocol
 * Open source REST API for viewing and analyzing any type of logs or traces. Its goal is to provide models to populate views, graphs, metrics, and more to help extract useful information from traces, in a way that is more user-friendly and informative than huge text dumps.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: tracecompass-dev@eclipse.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.eclipse.tracecompass.incubator.tsp.client.core.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import org.eclipse.tracecompass.incubator.tsp.client.core.JSON;


/**
 * TreeColumnHeader
 */
@JsonPropertyOrder({
  TreeColumnHeader.JSON_PROPERTY_DATA_TYPE,
  TreeColumnHeader.JSON_PROPERTY_TOOLTIP,
  TreeColumnHeader.JSON_PROPERTY_NAME
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-19T10:33:13.979273368-04:00[America/Toronto]", comments = "Generator version: 7.15.0")
public class TreeColumnHeader {
  /**
   * Data type of column. Optional, data type STRING is applied if absent. Possible strings are defined by the DataType enum.
   */
  public enum DataTypeEnum {
    NUMBER(String.valueOf("NUMBER")),
    
    BINARY_NUMBER(String.valueOf("BINARY_NUMBER")),
    
    TIMESTAMP(String.valueOf("TIMESTAMP")),
    
    DURATION(String.valueOf("DURATION")),
    
    STRING(String.valueOf("STRING")),
    
    TIME_RANGE(String.valueOf("TIME_RANGE"));

    private String value;

    DataTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DataTypeEnum fromValue(String value) {
      for (DataTypeEnum b : DataTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_DATA_TYPE = "dataType";
  @javax.annotation.Nullable
  private DataTypeEnum dataType;

  public static final String JSON_PROPERTY_TOOLTIP = "tooltip";
  @javax.annotation.Nonnull
  private String tooltip;

  public static final String JSON_PROPERTY_NAME = "name";
  @javax.annotation.Nonnull
  private String name;

  public TreeColumnHeader() { 
  }

  public TreeColumnHeader dataType(@javax.annotation.Nullable DataTypeEnum dataType) {
    this.dataType = dataType;
    return this;
  }

  /**
   * Data type of column. Optional, data type STRING is applied if absent. Possible strings are defined by the DataType enum.
   * @return dataType
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DATA_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DataTypeEnum getDataType() {
    return dataType;
  }


  @JsonProperty(JSON_PROPERTY_DATA_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDataType(@javax.annotation.Nullable DataTypeEnum dataType) {
    this.dataType = dataType;
  }


  public TreeColumnHeader tooltip(@javax.annotation.Nonnull String tooltip) {
    this.tooltip = tooltip;
    return this;
  }

  /**
   * Displayed tooltip for this header. Use empty string if no tooltip is desired.
   * @return tooltip
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TOOLTIP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTooltip() {
    return tooltip;
  }


  @JsonProperty(JSON_PROPERTY_TOOLTIP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTooltip(@javax.annotation.Nonnull String tooltip) {
    this.tooltip = tooltip;
  }


  public TreeColumnHeader name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * Displayed name for this header
   * @return name
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  /**
   * Return true if this TreeColumnHeader object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TreeColumnHeader treeColumnHeader = (TreeColumnHeader) o;
    return Objects.equals(this.dataType, treeColumnHeader.dataType) &&
        Objects.equals(this.tooltip, treeColumnHeader.tooltip) &&
        Objects.equals(this.name, treeColumnHeader.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataType, tooltip, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TreeColumnHeader {\n");
    sb.append("    dataType: ").append(toIndentedString(dataType)).append("\n");
    sb.append("    tooltip: ").append(toIndentedString(tooltip)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

