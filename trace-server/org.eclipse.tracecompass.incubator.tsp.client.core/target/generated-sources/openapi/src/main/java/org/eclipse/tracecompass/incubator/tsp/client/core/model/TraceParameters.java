/*
 * Trace Server Protocol
 * Open source REST API for viewing and analyzing any type of logs or traces. Its goal is to provide models to populate views, graphs, metrics, and more to help extract useful information from traces, in a way that is more user-friendly and informative than huge text dumps.
 *
 * The version of the OpenAPI document: 0.6.0
 * Contact: tracecompass-dev@eclipse.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.eclipse.tracecompass.incubator.tsp.client.core.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import org.eclipse.tracecompass.incubator.tsp.client.core.JSON;


/**
 * TraceParameters
 */
@JsonPropertyOrder({
  TraceParameters.JSON_PROPERTY_TYPE_I_D,
  TraceParameters.JSON_PROPERTY_NAME,
  TraceParameters.JSON_PROPERTY_URI
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.15.0")
public class TraceParameters {
  public static final String JSON_PROPERTY_TYPE_I_D = "typeID";
  @javax.annotation.Nullable
  private String typeID;

  public static final String JSON_PROPERTY_NAME = "name";
  @javax.annotation.Nullable
  private String name;

  public static final String JSON_PROPERTY_URI = "uri";
  @javax.annotation.Nonnull
  private String uri;

  public TraceParameters() { 
  }

  public TraceParameters typeID(@javax.annotation.Nullable String typeID) {
    this.typeID = typeID;
    return this;
  }

  /**
   * The trace type&#39;s ID, to force the use of a parser / disambiguate the trace type
   * @return typeID
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTypeID() {
    return typeID;
  }


  @JsonProperty(JSON_PROPERTY_TYPE_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTypeID(@javax.annotation.Nullable String typeID) {
    this.typeID = typeID;
  }


  public TraceParameters name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the trace in the server, to override the default name
   * @return name
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public TraceParameters uri(@javax.annotation.Nonnull String uri) {
    this.uri = uri;
    return this;
  }

  /**
   * URI of the trace
   * @return uri
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_URI)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getUri() {
    return uri;
  }


  @JsonProperty(JSON_PROPERTY_URI)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUri(@javax.annotation.Nonnull String uri) {
    this.uri = uri;
  }


  /**
   * Return true if this TraceParameters object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TraceParameters traceParameters = (TraceParameters) o;
    return Objects.equals(this.typeID, traceParameters.typeID) &&
        Objects.equals(this.name, traceParameters.name) &&
        Objects.equals(this.uri, traceParameters.uri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(typeID, name, uri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TraceParameters {\n");
    sb.append("    typeID: ").append(toIndentedString(typeID)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

