/*
 * Trace Server Protocol
 * Open source REST API for viewing and analyzing any type of logs or traces. Its goal is to provide models to populate views, graphs, metrics, and more to help extract useful information from traces, in a way that is more user-friendly and informative than huge text dumps.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: tracecompass-dev@eclipse.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.eclipse.tracecompass.incubator.tsp.client.core.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;
import org.eclipse.tracecompass.incubator.tsp.client.core.model.AxisDomainCategorical;
import org.eclipse.tracecompass.incubator.tsp.client.core.model.AxisDomainRange;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import org.eclipse.tracecompass.incubator.tsp.client.core.JSON;

import com.fasterxml.jackson.core.type.TypeReference;

import javax.ws.rs.core.GenericType;
import javax.ws.rs.core.Response;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import org.eclipse.tracecompass.incubator.tsp.client.core.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-19T10:33:13.979273368-04:00[America/Toronto]", comments = "Generator version: 7.15.0")
@JsonDeserialize(using = XYAxisDescriptionAxisDomain.XYAxisDescriptionAxisDomainDeserializer.class)
@JsonSerialize(using = XYAxisDescriptionAxisDomain.XYAxisDescriptionAxisDomainSerializer.class)
public class XYAxisDescriptionAxisDomain extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(XYAxisDescriptionAxisDomain.class.getName());

    public static class XYAxisDescriptionAxisDomainSerializer extends StdSerializer<XYAxisDescriptionAxisDomain> {
        public XYAxisDescriptionAxisDomainSerializer(Class<XYAxisDescriptionAxisDomain> t) {
            super(t);
        }

        public XYAxisDescriptionAxisDomainSerializer() {
            this(null);
        }

        @Override
        public void serialize(XYAxisDescriptionAxisDomain value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException {
            jgen.writeObject(value.getActualInstance());
        }
    }

    public static class XYAxisDescriptionAxisDomainDeserializer extends StdDeserializer<XYAxisDescriptionAxisDomain> {
        public XYAxisDescriptionAxisDomainDeserializer() {
            this(XYAxisDescriptionAxisDomain.class);
        }

        public XYAxisDescriptionAxisDomainDeserializer(Class<?> vc) {
            super(vc);
        }

        @Override
        public XYAxisDescriptionAxisDomain deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {
            JsonNode tree = jp.readValueAsTree();
            Object deserialized = null;
            boolean typeCoercion = ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS);
            int match = 0;
            JsonToken token = tree.traverse(jp.getCodec()).nextToken();
            // deserialize AxisDomainCategorical
            try {
                boolean attemptParsing = true;
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(AxisDomainCategorical.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'AxisDomainCategorical'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'AxisDomainCategorical'", e);
            }

            // deserialize AxisDomainRange
            try {
                boolean attemptParsing = true;
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(AxisDomainRange.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'AxisDomainRange'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'AxisDomainRange'", e);
            }

            if (match == 1) {
                XYAxisDescriptionAxisDomain ret = new XYAxisDescriptionAxisDomain();
                ret.setActualInstance(deserialized);
                return ret;
            }
            throw new IOException(String.format("Failed deserialization for XYAxisDescriptionAxisDomain: %d classes match result, expected 1", match));
        }

        /**
         * Handle deserialization of the 'null' value.
         */
        @Override
        public XYAxisDescriptionAxisDomain getNullValue(DeserializationContext ctxt) throws JsonMappingException {
            throw new JsonMappingException(ctxt.getParser(), "XYAxisDescriptionAxisDomain cannot be null");
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, GenericType<?>> schemas = new HashMap<>();

    public XYAxisDescriptionAxisDomain() {
        super("oneOf", Boolean.FALSE);
    }

    public XYAxisDescriptionAxisDomain(AxisDomainCategorical o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public XYAxisDescriptionAxisDomain(AxisDomainRange o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("AxisDomainCategorical", new GenericType<AxisDomainCategorical>() {
        });
        schemas.put("AxisDomainRange", new GenericType<AxisDomainRange>() {
        });
        JSON.registerDescendants(XYAxisDescriptionAxisDomain.class, Collections.unmodifiableMap(schemas));
    }

    @Override
    public Map<String, GenericType<?>> getSchemas() {
        return XYAxisDescriptionAxisDomain.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * AxisDomainCategorical, AxisDomainRange
     *
     * It could be an instance of the 'oneOf' schemas.
     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (JSON.isInstanceOf(AxisDomainCategorical.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(AxisDomainRange.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be AxisDomainCategorical, AxisDomainRange");
    }

    /**
     * Get the actual instance, which can be the following:
     * AxisDomainCategorical, AxisDomainRange
     *
     * @return The actual instance (AxisDomainCategorical, AxisDomainRange)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `AxisDomainCategorical`. If the actual instance is not `AxisDomainCategorical`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AxisDomainCategorical`
     * @throws ClassCastException if the instance is not `AxisDomainCategorical`
     */
    public AxisDomainCategorical getAxisDomainCategorical() throws ClassCastException {
        return (AxisDomainCategorical)super.getActualInstance();
    }

    /**
     * Get the actual instance of `AxisDomainRange`. If the actual instance is not `AxisDomainRange`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AxisDomainRange`
     * @throws ClassCastException if the instance is not `AxisDomainRange`
     */
    public AxisDomainRange getAxisDomainRange() throws ClassCastException {
        return (AxisDomainRange)super.getActualInstance();
    }

}

