/*
 * Trace Server Protocol
 * Open source REST API for viewing and analyzing any type of logs or traces. Its goal is to provide models to populate views, graphs, metrics, and more to help extract useful information from traces, in a way that is more user-friendly and informative than huge text dumps.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: tracecompass-dev@eclipse.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.eclipse.tracecompass.incubator.tsp.client.core.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import org.eclipse.tracecompass.incubator.tsp.client.core.JSON;


/**
 * Configuration instance describing user provided configuration parameters.
 */
@JsonPropertyOrder({
  ModelConfiguration.JSON_PROPERTY_SOURCE_TYPE_ID,
  ModelConfiguration.JSON_PROPERTY_DESCRIPTION,
  ModelConfiguration.JSON_PROPERTY_NAME,
  ModelConfiguration.JSON_PROPERTY_ID,
  ModelConfiguration.JSON_PROPERTY_PARAMETERS
})
@JsonTypeName("Configuration")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-19T10:33:13.979273368-04:00[America/Toronto]", comments = "Generator version: 7.15.0")
public class ModelConfiguration {
  public static final String JSON_PROPERTY_SOURCE_TYPE_ID = "sourceTypeId";
  @javax.annotation.Nonnull
  private String sourceTypeId;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  @javax.annotation.Nullable
  private String description;

  public static final String JSON_PROPERTY_NAME = "name";
  @javax.annotation.Nonnull
  private String name;

  public static final String JSON_PROPERTY_ID = "id";
  @javax.annotation.Nonnull
  private String id;

  public static final String JSON_PROPERTY_PARAMETERS = "parameters";
  @javax.annotation.Nullable
  private Map<String, Object> parameters = new HashMap<>();

  public ModelConfiguration() { 
  }

  public ModelConfiguration sourceTypeId(@javax.annotation.Nonnull String sourceTypeId) {
    this.sourceTypeId = sourceTypeId;
    return this;
  }

  /**
   * The ID of the configuration source type
   * @return sourceTypeId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SOURCE_TYPE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getSourceTypeId() {
    return sourceTypeId;
  }


  @JsonProperty(JSON_PROPERTY_SOURCE_TYPE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSourceTypeId(@javax.annotation.Nonnull String sourceTypeId) {
    this.sourceTypeId = sourceTypeId;
  }


  public ModelConfiguration description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Optional, describes the configuration instance
   * @return description
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public ModelConfiguration name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * The human readable name
   * @return name
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public ModelConfiguration id(@javax.annotation.Nonnull String id) {
    this.id = id;
    return this;
  }

  /**
   * The unique ID of the configuration instance
   * @return id
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(@javax.annotation.Nonnull String id) {
    this.id = id;
  }


  public ModelConfiguration parameters(@javax.annotation.Nullable Map<String, Object> parameters) {
    this.parameters = parameters;
    return this;
  }

  public ModelConfiguration putParametersItem(String key, Object parametersItem) {
    if (this.parameters == null) {
      this.parameters = new HashMap<>();
    }
    this.parameters.put(key, parametersItem);
    return this;
  }

  /**
   * Optional parameters representing the configuration parameters used to create this configuration.
   * @return parameters
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PARAMETERS)
  @JsonInclude(content = JsonInclude.Include.ALWAYS, value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, Object> getParameters() {
    return parameters;
  }


  @JsonProperty(JSON_PROPERTY_PARAMETERS)
  @JsonInclude(content = JsonInclude.Include.ALWAYS, value = JsonInclude.Include.USE_DEFAULTS)
  public void setParameters(@javax.annotation.Nullable Map<String, Object> parameters) {
    this.parameters = parameters;
  }


  /**
   * Return true if this Configuration object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelConfiguration _configuration = (ModelConfiguration) o;
    return Objects.equals(this.sourceTypeId, _configuration.sourceTypeId) &&
        Objects.equals(this.description, _configuration.description) &&
        Objects.equals(this.name, _configuration.name) &&
        Objects.equals(this.id, _configuration.id) &&
        Objects.equals(this.parameters, _configuration.parameters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sourceTypeId, description, name, id, parameters);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelConfiguration {\n");
    sb.append("    sourceTypeId: ").append(toIndentedString(sourceTypeId)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

