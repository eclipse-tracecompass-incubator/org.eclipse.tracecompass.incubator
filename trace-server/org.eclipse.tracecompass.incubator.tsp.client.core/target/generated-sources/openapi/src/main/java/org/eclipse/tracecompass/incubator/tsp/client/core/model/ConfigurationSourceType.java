/*
 * Trace Server Protocol
 * Open source REST API for viewing and analyzing any type of logs or traces. Its goal is to provide models to populate views, graphs, metrics, and more to help extract useful information from traces, in a way that is more user-friendly and informative than huge text dumps.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: tracecompass-dev@eclipse.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.eclipse.tracecompass.incubator.tsp.client.core.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.eclipse.tracecompass.incubator.tsp.client.core.model.ConfigurationParameterDescriptor;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import org.eclipse.tracecompass.incubator.tsp.client.core.JSON;


/**
 * ConfigurationSourceType
 */
@JsonPropertyOrder({
  ConfigurationSourceType.JSON_PROPERTY_PARAMETER_DESCRIPTORS,
  ConfigurationSourceType.JSON_PROPERTY_DESCRIPTION,
  ConfigurationSourceType.JSON_PROPERTY_NAME,
  ConfigurationSourceType.JSON_PROPERTY_ID,
  ConfigurationSourceType.JSON_PROPERTY_SCHEMA
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-19T10:33:13.979273368-04:00[America/Toronto]", comments = "Generator version: 7.15.0")
public class ConfigurationSourceType {
  public static final String JSON_PROPERTY_PARAMETER_DESCRIPTORS = "parameterDescriptors";
  @javax.annotation.Nullable
  private List<ConfigurationParameterDescriptor> parameterDescriptors = new ArrayList<>();

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  @javax.annotation.Nullable
  private String description;

  public static final String JSON_PROPERTY_NAME = "name";
  @javax.annotation.Nonnull
  private String name;

  public static final String JSON_PROPERTY_ID = "id";
  @javax.annotation.Nonnull
  private String id;

  public static final String JSON_PROPERTY_SCHEMA = "schema";
  @javax.annotation.Nullable
  private Object schema;

  public ConfigurationSourceType() { 
  }

  public ConfigurationSourceType parameterDescriptors(@javax.annotation.Nullable List<ConfigurationParameterDescriptor> parameterDescriptors) {
    this.parameterDescriptors = parameterDescriptors;
    return this;
  }

  public ConfigurationSourceType addParameterDescriptorsItem(ConfigurationParameterDescriptor parameterDescriptorsItem) {
    if (this.parameterDescriptors == null) {
      this.parameterDescriptors = new ArrayList<>();
    }
    this.parameterDescriptors.add(parameterDescriptorsItem);
    return this;
  }

  /**
   * A list of configuration parameter descriptors to be passed when creating or updating a configuration instance of this type. Use this instead of schema. Omit if not used.
   * @return parameterDescriptors
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PARAMETER_DESCRIPTORS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ConfigurationParameterDescriptor> getParameterDescriptors() {
    return parameterDescriptors;
  }


  @JsonProperty(JSON_PROPERTY_PARAMETER_DESCRIPTORS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setParameterDescriptors(@javax.annotation.Nullable List<ConfigurationParameterDescriptor> parameterDescriptors) {
    this.parameterDescriptors = parameterDescriptors;
  }


  public ConfigurationSourceType description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Optional, describes the configuration source type
   * @return description
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public ConfigurationSourceType name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * The human readable name
   * @return name
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public ConfigurationSourceType id(@javax.annotation.Nonnull String id) {
    this.id = id;
    return this;
  }

  /**
   * The unique ID of the configuration source type
   * @return id
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(@javax.annotation.Nonnull String id) {
    this.id = id;
  }


  public ConfigurationSourceType schema(@javax.annotation.Nullable Object schema) {
    this.schema = schema;
    return this;
  }

  /**
   * A JSON object that describes a JSON schema for parameters that the front-end needs to provide with corresponding values. The schema has to adhere to JSON schema specification (see https://json-schema.org/). Use this for complex parameter descriptions instead of parameterDescriptors. Omit if not used.
   * @return schema
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SCHEMA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getSchema() {
    return schema;
  }


  @JsonProperty(JSON_PROPERTY_SCHEMA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSchema(@javax.annotation.Nullable Object schema) {
    this.schema = schema;
  }


  /**
   * Return true if this ConfigurationSourceType object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigurationSourceType configurationSourceType = (ConfigurationSourceType) o;
    return Objects.equals(this.parameterDescriptors, configurationSourceType.parameterDescriptors) &&
        Objects.equals(this.description, configurationSourceType.description) &&
        Objects.equals(this.name, configurationSourceType.name) &&
        Objects.equals(this.id, configurationSourceType.id) &&
        Objects.equals(this.schema, configurationSourceType.schema);
  }

  @Override
  public int hashCode() {
    return Objects.hash(parameterDescriptors, description, name, id, schema);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigurationSourceType {\n");
    sb.append("    parameterDescriptors: ").append(toIndentedString(parameterDescriptors)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    schema: ").append(toIndentedString(schema)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

