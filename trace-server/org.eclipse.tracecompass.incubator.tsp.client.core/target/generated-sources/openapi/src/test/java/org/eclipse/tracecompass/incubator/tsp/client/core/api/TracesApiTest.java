/*
 * Trace Server Protocol
 * Open source REST API for viewing and analyzing any type of logs or traces. Its goal is to provide models to populate views, graphs, metrics, and more to help extract useful information from traces, in a way that is more user-friendly and informative than huge text dumps.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: tracecompass-dev@eclipse.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.eclipse.tracecompass.incubator.tsp.client.core.api;

import org.eclipse.tracecompass.incubator.tsp.client.core.*;
import org.eclipse.tracecompass.incubator.tsp.client.core.auth.*;
import org.eclipse.tracecompass.incubator.tsp.client.core.model.ErrorResponse;
import org.eclipse.tracecompass.incubator.tsp.client.core.model.Trace;
import org.eclipse.tracecompass.incubator.tsp.client.core.model.TraceErrorResponse;
import org.eclipse.tracecompass.incubator.tsp.client.core.model.TraceQueryParameters;
import java.util.UUID;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TracesApi
 */
public class TracesApiTest {

    private final TracesApi api = new TracesApi();

    /**
     * Remove a trace from the server and disk
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTraceTest() throws ApiException {
        //UUID uuid = null;
        //Trace response = api.deleteTrace(uuid);
        // TODO: test validations
    }

    /**
     * Get the model object for a trace
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTraceTest() throws ApiException {
        //UUID uuid = null;
        //Trace response = api.getTrace(uuid);
        // TODO: test validations
    }

    /**
     * Get the list of physical traces imported on the server
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTracesTest() throws ApiException {
        //List<Trace> response = api.getTraces();
        // TODO: test validations
    }

    /**
     * Import a trace
     *
     * Import a trace to the trace server. Return some base information once imported.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putTraceTest() throws ApiException {
        //TraceQueryParameters traceQueryParameters = null;
        //Trace response = api.putTrace(traceQueryParameters);
        // TODO: test validations
    }

}
