/*
 * Trace Server Protocol
 * Open source REST API for viewing and analyzing any type of logs or traces. Its goal is to provide models to populate views, graphs, metrics, and more to help extract useful information from traces, in a way that is more user-friendly and informative than huge text dumps.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: tracecompass-dev@eclipse.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.eclipse.tracecompass.incubator.tsp.client.core.api;

import org.eclipse.tracecompass.incubator.tsp.client.core.*;
import org.eclipse.tracecompass.incubator.tsp.client.core.auth.*;
import org.eclipse.tracecompass.incubator.tsp.client.core.model.ConfigurationQueryParameters;
import org.eclipse.tracecompass.incubator.tsp.client.core.model.ConfigurationSourceType;
import org.eclipse.tracecompass.incubator.tsp.client.core.model.ErrorResponse;
import org.eclipse.tracecompass.incubator.tsp.client.core.model.ModelConfiguration;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ConfigurationsApi
 */
public class ConfigurationsApiTest {

    private final ConfigurationsApi api = new ConfigurationsApi();

    /**
     * Delete a configuration instance of a given configuration source type
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteConfigurationTest() throws ApiException {
        //String typeId = null;
        //String configId = null;
        //ModelConfiguration response = api.deleteConfiguration(typeId, configId);
        // TODO: test validations
    }

    /**
     * Get a configuration instance of a given configuration source type
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConfigurationTest() throws ApiException {
        //String typeId = null;
        //String configId = null;
        //ModelConfiguration response = api.getConfiguration(typeId, configId);
        // TODO: test validations
    }

    /**
     * Get a single configuration source type defined on the server
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConfigurationTypeTest() throws ApiException {
        //String typeId = null;
        //ConfigurationSourceType response = api.getConfigurationType(typeId);
        // TODO: test validations
    }

    /**
     * Get the list of configuration source types defined on the server
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConfigurationTypesTest() throws ApiException {
        //List<ConfigurationSourceType> response = api.getConfigurationTypes();
        // TODO: test validations
    }

    /**
     * Get the list of configurations that are instantiated of a given configuration source type
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConfigurationsTest() throws ApiException {
        //String typeId = null;
        //List<ModelConfiguration> response = api.getConfigurations(typeId);
        // TODO: test validations
    }

    /**
     * Create a configuration instance for the given configuration source type
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postConfigurationTest() throws ApiException {
        //String typeId = null;
        //ConfigurationQueryParameters configurationQueryParameters = null;
        //ModelConfiguration response = api.postConfiguration(typeId, configurationQueryParameters);
        // TODO: test validations
    }

    /**
     * Update a configuration instance of a given configuration source type
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putConfigurationTest() throws ApiException {
        //String typeId = null;
        //String configId = null;
        //ConfigurationQueryParameters configurationQueryParameters = null;
        //ModelConfiguration response = api.putConfiguration(typeId, configId, configurationQueryParameters);
        // TODO: test validations
    }

}
