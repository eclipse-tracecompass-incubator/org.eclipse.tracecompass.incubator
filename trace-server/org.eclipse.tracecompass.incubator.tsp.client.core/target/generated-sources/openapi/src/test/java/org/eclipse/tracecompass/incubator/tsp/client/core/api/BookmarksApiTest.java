/*
 * Trace Server Protocol
 * Open source REST API for viewing and analyzing any type of logs or traces. Its goal is to provide models to populate views, graphs, metrics, and more to help extract useful information from traces, in a way that is more user-friendly and informative than huge text dumps.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: tracecompass-dev@eclipse.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.eclipse.tracecompass.incubator.tsp.client.core.api;

import org.eclipse.tracecompass.incubator.tsp.client.core.*;
import org.eclipse.tracecompass.incubator.tsp.client.core.auth.*;
import org.eclipse.tracecompass.incubator.tsp.client.core.model.Bookmark;
import org.eclipse.tracecompass.incubator.tsp.client.core.model.BookmarkQueryParameters;
import org.eclipse.tracecompass.incubator.tsp.client.core.model.ErrorResponse;
import java.util.UUID;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BookmarksApi
 */
public class BookmarksApiTest {

    private final BookmarksApi api = new BookmarksApi();

    /**
     * Create a new bookmark in an experiment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createBookmarkTest() throws ApiException {
        //UUID expUUID = null;
        //BookmarkQueryParameters bookmarkQueryParameters = null;
        //Bookmark response = api.createBookmark(expUUID, bookmarkQueryParameters);
        // TODO: test validations
    }

    /**
     * Delete a bookmark from an experiment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteBookmarkTest() throws ApiException {
        //UUID expUUID = null;
        //UUID bookmarkUUID = null;
        //Bookmark response = api.deleteBookmark(expUUID, bookmarkUUID);
        // TODO: test validations
    }

    /**
     * Get a specific bookmark from an experiment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBookmarkTest() throws ApiException {
        //UUID expUUID = null;
        //UUID bookmarkUUID = null;
        //Bookmark response = api.getBookmark(expUUID, bookmarkUUID);
        // TODO: test validations
    }

    /**
     * Get all bookmarks for an experiment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBookmarksTest() throws ApiException {
        //UUID expUUID = null;
        //List<Bookmark> response = api.getBookmarks(expUUID);
        // TODO: test validations
    }

    /**
     * Update an existing bookmark in an experiment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateBookmarkTest() throws ApiException {
        //UUID expUUID = null;
        //UUID bookmarkUUID = null;
        //BookmarkQueryParameters bookmarkQueryParameters = null;
        //Bookmark response = api.updateBookmark(expUUID, bookmarkUUID, bookmarkQueryParameters);
        // TODO: test validations
    }

}
