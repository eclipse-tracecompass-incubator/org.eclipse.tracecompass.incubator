/*
 * Trace Server Protocol
 * Open source REST API for viewing and analyzing any type of logs or traces. Its goal is to provide models to populate views, graphs, metrics, and more to help extract useful information from traces, in a way that is more user-friendly and informative than huge text dumps.
 *
 * The version of the OpenAPI document: 0.6.0
 * Contact: tracecompass-dev@eclipse.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.eclipse.tracecompass.incubator.tsp.client.core.api;

import org.eclipse.tracecompass.incubator.tsp.client.core.*;
import org.eclipse.tracecompass.incubator.tsp.client.core.auth.*;
import org.eclipse.tracecompass.incubator.tsp.client.core.model.ConfigurationSourceType;
import org.eclipse.tracecompass.incubator.tsp.client.core.model.DataProvider;
import org.eclipse.tracecompass.incubator.tsp.client.core.model.ErrorResponse;
import org.eclipse.tracecompass.incubator.tsp.client.core.model.OutputConfigurationQueryParameters;
import java.util.UUID;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OutputConfigurationsApi
 */
public class OutputConfigurationsApiTest {

    private final OutputConfigurationsApi api = new OutputConfigurationsApi();

    /**
     * Get a derived data provider from a input configuration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createProviderTest() throws ApiException {
        //UUID expUUID = null;
        //String outputId = null;
        //OutputConfigurationQueryParameters outputConfigurationQueryParameters = null;
        //DataProvider response = api.createProvider(expUUID, outputId, outputConfigurationQueryParameters);
        // TODO: test validations
    }

    /**
     * Delete a derived output (and its configuration).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDerivedProviderTest() throws ApiException {
        //UUID expUUID = null;
        //String outputId = null;
        //String derivedOutputId = null;
        //DataProvider response = api.deleteDerivedProvider(expUUID, outputId, derivedOutputId);
        // TODO: test validations
    }

    /**
     * Get a single configuration source type defined on the server for a given data provider and experiment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConfigurationType1Test() throws ApiException {
        //UUID expUUID = null;
        //String outputId = null;
        //String typeId = null;
        //ConfigurationSourceType response = api.getConfigurationType1(expUUID, outputId, typeId);
        // TODO: test validations
    }

    /**
     * Get the list of configuration types defined on the server for a given output and experiment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConfigurationTypes1Test() throws ApiException {
        //UUID expUUID = null;
        //String outputId = null;
        //List<ConfigurationSourceType> response = api.getConfigurationTypes1(expUUID, outputId);
        // TODO: test validations
    }

}
