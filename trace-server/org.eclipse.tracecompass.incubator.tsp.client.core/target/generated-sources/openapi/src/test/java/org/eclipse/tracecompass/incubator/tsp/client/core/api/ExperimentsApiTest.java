/*
 * Trace Server Protocol
 * Open source REST API for viewing and analyzing any type of logs or traces. Its goal is to provide models to populate views, graphs, metrics, and more to help extract useful information from traces, in a way that is more user-friendly and informative than huge text dumps.
 *
 * The version of the OpenAPI document: 0.6.0
 * Contact: tracecompass-dev@eclipse.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.eclipse.tracecompass.incubator.tsp.client.core.api;

import org.eclipse.tracecompass.incubator.tsp.client.core.*;
import org.eclipse.tracecompass.incubator.tsp.client.core.auth.*;
import org.eclipse.tracecompass.incubator.tsp.client.core.model.DataProvider;
import org.eclipse.tracecompass.incubator.tsp.client.core.model.ErrorResponse;
import org.eclipse.tracecompass.incubator.tsp.client.core.model.Experiment;
import org.eclipse.tracecompass.incubator.tsp.client.core.model.ExperimentErrorResponse;
import org.eclipse.tracecompass.incubator.tsp.client.core.model.ExperimentQueryParameters;
import java.util.UUID;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ExperimentsApi
 */
public class ExperimentsApiTest {

    private final ExperimentsApi api = new ExperimentsApi();

    /**
     * Remove an experiment from the server
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteExperimentTest() throws ApiException {
        //UUID expUUID = null;
        //Experiment response = api.deleteExperiment(expUUID);
        // TODO: test validations
    }

    /**
     * Get the model object for an experiment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getExperimentTest() throws ApiException {
        //UUID expUUID = null;
        //Experiment response = api.getExperiment(expUUID);
        // TODO: test validations
    }

    /**
     * Get the list of experiments on the server
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getExperimentsTest() throws ApiException {
        //List<Experiment> response = api.getExperiments();
        // TODO: test validations
    }

    /**
     * Get the output descriptor for this experiment and output
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProviderTest() throws ApiException {
        //UUID expUUID = null;
        //String outputId = null;
        //DataProvider response = api.getProvider(expUUID, outputId);
        // TODO: test validations
    }

    /**
     * Get the list of outputs for this experiment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProvidersTest() throws ApiException {
        //UUID expUUID = null;
        //List<DataProvider> response = api.getProviders(expUUID);
        // TODO: test validations
    }

    /**
     * Create a new experiment on the server
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postExperimentTest() throws ApiException {
        //ExperimentQueryParameters experimentQueryParameters = null;
        //Experiment response = api.postExperiment(experimentQueryParameters);
        // TODO: test validations
    }

}
