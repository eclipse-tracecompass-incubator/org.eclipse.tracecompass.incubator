/*
 * Trace Server Protocol
 * Open source REST API for viewing and analyzing any type of logs or traces. Its goal is to provide models to populate views, graphs, metrics, and more to help extract useful information from traces, in a way that is more user-friendly and informative than huge text dumps.
 *
 * The version of the OpenAPI document: 0.6.0
 * Contact: tracecompass-dev@eclipse.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.eclipse.tracecompass.incubator.tsp.client.core.api;

import org.eclipse.tracecompass.incubator.tsp.client.core.*;
import org.eclipse.tracecompass.incubator.tsp.client.core.auth.*;
import org.eclipse.tracecompass.incubator.tsp.client.core.model.AnnotationCategoriesResponse;
import org.eclipse.tracecompass.incubator.tsp.client.core.model.AnnotationResponse;
import org.eclipse.tracecompass.incubator.tsp.client.core.model.AnnotationsQueryParameters;
import org.eclipse.tracecompass.incubator.tsp.client.core.model.ErrorResponse;
import org.eclipse.tracecompass.incubator.tsp.client.core.model.MarkerSetsResponse;
import java.util.UUID;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AnnotationsApi
 */
public class AnnotationsApiTest {

    private final AnnotationsApi api = new AnnotationsApi();

    /**
     * API to get annotation categories associated to this experiment and output
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAnnotationCategoriesTest() throws ApiException {
        //UUID expUUID = null;
        //String outputId = null;
        //String markerSetId = null;
        //AnnotationCategoriesResponse response = api.getAnnotationCategories(expUUID, outputId, markerSetId);
        // TODO: test validations
    }

    /**
     * API to get the annotations associated to this experiment and output
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAnnotationsTest() throws ApiException {
        //UUID expUUID = null;
        //String outputId = null;
        //AnnotationsQueryParameters annotationsQueryParameters = null;
        //AnnotationResponse response = api.getAnnotations(expUUID, outputId, annotationsQueryParameters);
        // TODO: test validations
    }

    /**
     * API to get marker sets available for this experiment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMarkerSetsTest() throws ApiException {
        //UUID expUUID = null;
        //MarkerSetsResponse response = api.getMarkerSets(expUUID);
        // TODO: test validations
    }

}
