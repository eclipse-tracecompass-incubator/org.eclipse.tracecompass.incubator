/*
 * Trace Server Protocol
 * Open source REST API for viewing and analyzing any type of logs or traces. Its goal is to provide models to populate views, graphs, metrics, and more to help extract useful information from traces, in a way that is more user-friendly and informative than huge text dumps.
 *
 * The version of the OpenAPI document: 0.6.0
 * Contact: tracecompass-dev@eclipse.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.eclipse.tracecompass.incubator.tsp.client.core.api;

import org.eclipse.tracecompass.incubator.tsp.client.core.*;
import org.eclipse.tracecompass.incubator.tsp.client.core.auth.*;
import org.eclipse.tracecompass.incubator.tsp.client.core.model.ErrorResponse;
import org.eclipse.tracecompass.incubator.tsp.client.core.model.OptionalQueryParameters;
import org.eclipse.tracecompass.incubator.tsp.client.core.model.StylesResponse;
import java.util.UUID;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for StylesApi
 */
public class StylesApiTest {

    private final StylesApi api = new StylesApi();

    /**
     * API to get the style map associated to this experiment and output
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStylesTest() throws ApiException {
        //UUID expUUID = null;
        //String outputId = null;
        //OptionalQueryParameters optionalQueryParameters = null;
        //StylesResponse response = api.getStyles(expUUID, outputId, optionalQueryParameters);
        // TODO: test validations
    }

}
