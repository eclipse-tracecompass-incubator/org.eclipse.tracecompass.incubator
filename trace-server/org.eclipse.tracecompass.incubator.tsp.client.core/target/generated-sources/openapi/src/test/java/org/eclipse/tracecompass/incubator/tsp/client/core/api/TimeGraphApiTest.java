/*
 * Trace Server Protocol
 * Open source REST API for viewing and analyzing any type of logs or traces. Its goal is to provide models to populate views, graphs, metrics, and more to help extract useful information from traces, in a way that is more user-friendly and informative than huge text dumps.
 *
 * The version of the OpenAPI document: 0.5.0
 * Contact: tracecompass-dev@eclipse.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.eclipse.tracecompass.incubator.tsp.client.core.api;

import org.eclipse.tracecompass.incubator.tsp.client.core.*;
import org.eclipse.tracecompass.incubator.tsp.client.core.auth.*;
import org.eclipse.tracecompass.incubator.tsp.client.core.model.ArrowsQueryParameters;
import org.eclipse.tracecompass.incubator.tsp.client.core.model.ErrorResponse;
import org.eclipse.tracecompass.incubator.tsp.client.core.model.RequestedQueryParameters;
import org.eclipse.tracecompass.incubator.tsp.client.core.model.TimeGraphArrowsResponse;
import org.eclipse.tracecompass.incubator.tsp.client.core.model.TimeGraphStatesResponse;
import org.eclipse.tracecompass.incubator.tsp.client.core.model.TimeGraphTooltipResponse;
import org.eclipse.tracecompass.incubator.tsp.client.core.model.TimeGraphTreeResponse;
import org.eclipse.tracecompass.incubator.tsp.client.core.model.TooltipQueryParameters;
import org.eclipse.tracecompass.incubator.tsp.client.core.model.TreeQueryParameters;
import java.util.UUID;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TimeGraphApi
 */
public class TimeGraphApiTest {

    private final TimeGraphApi api = new TimeGraphApi();

    /**
     * API to get the Time Graph arrows
     *
     * Unique entry point for all TimeGraph models, ensures that the same template is followed for all models
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getArrowsTest() throws ApiException {
        //UUID expUUID = null;
        //String outputId = null;
        //ArrowsQueryParameters arrowsQueryParameters = null;
        //TimeGraphArrowsResponse response = api.getArrows(expUUID, outputId, arrowsQueryParameters);
        // TODO: test validations
    }

    /**
     * API to get the Time Graph states
     *
     * Unique entry point for all TimeGraph states, ensures that the same template is followed for all views
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStatesTest() throws ApiException {
        //UUID expUUID = null;
        //String outputId = null;
        //RequestedQueryParameters requestedQueryParameters = null;
        //TimeGraphStatesResponse response = api.getStates(expUUID, outputId, requestedQueryParameters);
        // TODO: test validations
    }

    /**
     * API to get a Time Graph tooltip
     *
     * Endpoint to retrieve tooltips for time graph
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTimeGraphTooltipTest() throws ApiException {
        //UUID expUUID = null;
        //String outputId = null;
        //TooltipQueryParameters tooltipQueryParameters = null;
        //TimeGraphTooltipResponse response = api.getTimeGraphTooltip(expUUID, outputId, tooltipQueryParameters);
        // TODO: test validations
    }

    /**
     * API to get the Time Graph tree
     *
     * Unique entry point for output providers, to get the tree of visible entries
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTimeGraphTreeTest() throws ApiException {
        //UUID expUUID = null;
        //String outputId = null;
        //TreeQueryParameters treeQueryParameters = null;
        //TimeGraphTreeResponse response = api.getTimeGraphTree(expUUID, outputId, treeQueryParameters);
        // TODO: test validations
    }

}
